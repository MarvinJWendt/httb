//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for UserGender.
const (
	Female UserGender = "female"
	Male   UserGender = "male"
	Other  UserGender = "other"
)

// Defines values for FormatParam.
const (
	FormatParamJson FormatParam = "json"
	FormatParamText FormatParam = "text"
)

// Defines values for GetPingParamsFormat.
const (
	GetPingParamsFormatJson GetPingParamsFormat = "json"
	GetPingParamsFormatText GetPingParamsFormat = "text"
)

// Defines values for DeleteReturnParamsFormat.
const (
	DeleteReturnParamsFormatJson DeleteReturnParamsFormat = "json"
	DeleteReturnParamsFormatText DeleteReturnParamsFormat = "text"
)

// Defines values for GetReturnParamsFormat.
const (
	GetReturnParamsFormatJson GetReturnParamsFormat = "json"
	GetReturnParamsFormatText GetReturnParamsFormat = "text"
)

// Defines values for PatchReturnParamsFormat.
const (
	PatchReturnParamsFormatJson PatchReturnParamsFormat = "json"
	PatchReturnParamsFormatText PatchReturnParamsFormat = "text"
)

// Defines values for PostReturnParamsFormat.
const (
	PostReturnParamsFormatJson PostReturnParamsFormat = "json"
	PostReturnParamsFormatText PostReturnParamsFormat = "text"
)

// Defines values for PutReturnParamsFormat.
const (
	Json PutReturnParamsFormat = "json"
	Text PutReturnParamsFormat = "text"
)

// Address defines model for Address.
type Address struct {
	City   *string `fake:"{city}" json:"city,omitempty"`
	Street *string `fake:"{street}" json:"street,omitempty"`
	Zip    *string `fake:"{zip}" json:"zip,omitempty"`
}

// Contact defines model for Contact.
type Contact struct {
	Email *openapi_types.Email `fake:"{email}" json:"email,omitempty"`
	Phone *string              `fake:"{phone}" json:"phone,omitempty"`
}

// Log defines model for Log.
type Log struct {
	Level     *string    `fake:"{weighted:[debug,info,warn,error],[1,5,3,2]}" json:"level,omitempty"`
	Message   *string    `fake:"{hackerphrase}" json:"message,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// StatusCodeMessage Status code and status message
type StatusCodeMessage struct {
	// Message Status code message
	Message *string `json:"message,omitempty"`

	// Status Status code
	Status *int `json:"status,omitempty"`
}

// User defines model for User.
type User struct {
	Address   *Address    `json:"address,omitempty"`
	Age       *int        `fake:"{number:0,100}" json:"age,omitempty"`
	Contact   *Contact    `json:"contact,omitempty"`
	FirstName *string     `fake:"{firstname}" json:"firstName,omitempty"`
	Gender    *UserGender `fake:"{randomstring:[male,female,other]}" json:"gender,omitempty"`
	LastName  *string     `fake:"{lastname}" json:"lastName,omitempty"`
}

// UserGender defines model for User.Gender.
type UserGender string

// Count defines model for Count.
type Count = int

// DelayParam defines model for DelayParam.
type DelayParam = int

// FormatParam defines model for FormatParam.
type FormatParam string

// LogLevelWeights defines model for LogLevelWeights.
type LogLevelWeights = []float32

// LogLevels defines model for LogLevels.
type LogLevels = []string

// StreamInterval defines model for StreamInterval.
type StreamInterval = int

// GetJsonRandomParams defines parameters for GetJsonRandom.
type GetJsonRandomParams struct {
	// Delay Delay in milliseconds before the response is sent (min: 0; max: 10000)
	Delay *DelayParam `form:"delay,omitempty" json:"delay,omitempty"`

	// MaxDepth Maximum depth of the JSON object
	MaxDepth *int `form:"maxDepth,omitempty" json:"maxDepth,omitempty"`

	// MinDepth Minimum depth of the JSON object
	MinDepth *int `form:"minDepth,omitempty" json:"minDepth,omitempty"`

	// MaxElems Maximum number of elements per JSON object
	MaxElems *int `form:"maxElems,omitempty" json:"maxElems,omitempty"`
}

// GetJsonRandomAddressParams defines parameters for GetJsonRandomAddress.
type GetJsonRandomAddressParams struct {
	// Delay Delay in milliseconds before the response is sent (min: 0; max: 10000)
	Delay *DelayParam `form:"delay,omitempty" json:"delay,omitempty"`
}

// GetJsonRandomAddressesParams defines parameters for GetJsonRandomAddresses.
type GetJsonRandomAddressesParams struct {
	// Delay Delay in milliseconds before the response is sent (min: 0; max: 10000)
	Delay *DelayParam `form:"delay,omitempty" json:"delay,omitempty"`

	// Count Number of entries to return (min: 1; max: 10000)
	Count *Count `form:"count,omitempty" json:"count,omitempty"`
}

// GetJsonRandomContactParams defines parameters for GetJsonRandomContact.
type GetJsonRandomContactParams struct {
	// Delay Delay in milliseconds before the response is sent (min: 0; max: 10000)
	Delay *DelayParam `form:"delay,omitempty" json:"delay,omitempty"`
}

// GetJsonRandomContactsParams defines parameters for GetJsonRandomContacts.
type GetJsonRandomContactsParams struct {
	// Delay Delay in milliseconds before the response is sent (min: 0; max: 10000)
	Delay *DelayParam `form:"delay,omitempty" json:"delay,omitempty"`

	// Count Number of entries to return (min: 1; max: 10000)
	Count *Count `form:"count,omitempty" json:"count,omitempty"`
}

// GetJsonRandomLogParams defines parameters for GetJsonRandomLog.
type GetJsonRandomLogParams struct {
	// Delay Delay in milliseconds before the response is sent (min: 0; max: 10000)
	Delay *DelayParam `form:"delay,omitempty" json:"delay,omitempty"`

	// LogLevels Log levels to use (default: `debug,info,warn,error`)
	LogLevels *LogLevels `form:"logLevels,omitempty" json:"logLevels,omitempty"`

	// LogLevelWeights Log level weights (default: `1,5,3,2`)
	LogLevelWeights *LogLevelWeights `form:"logLevelWeights,omitempty" json:"logLevelWeights,omitempty"`

	// Count Number of log entries to return (min: 1; max: 10000)
	Count *int `form:"count,omitempty" json:"count,omitempty"`
}

// GetJsonRandomUserParams defines parameters for GetJsonRandomUser.
type GetJsonRandomUserParams struct {
	// Delay Delay in milliseconds before the response is sent (min: 0; max: 10000)
	Delay *DelayParam `form:"delay,omitempty" json:"delay,omitempty"`
}

// GetJsonRandomUsersParams defines parameters for GetJsonRandomUsers.
type GetJsonRandomUsersParams struct {
	// Delay Delay in milliseconds before the response is sent (min: 0; max: 10000)
	Delay *DelayParam `form:"delay,omitempty" json:"delay,omitempty"`

	// Count Number of entries to return (min: 1; max: 10000)
	Count *Count `form:"count,omitempty" json:"count,omitempty"`
}

// GetPingParams defines parameters for GetPing.
type GetPingParams struct {
	// Format Response format (default: `json`)
	Format *GetPingParamsFormat `form:"format,omitempty" json:"format,omitempty"`

	// Delay Delay in milliseconds before the response is sent (min: 0; max: 10000)
	Delay *DelayParam `form:"delay,omitempty" json:"delay,omitempty"`
}

// GetPingParamsFormat defines parameters for GetPing.
type GetPingParamsFormat string

// DeleteReturnParams defines parameters for DeleteReturn.
type DeleteReturnParams struct {
	// Delay Delay in milliseconds before the response is sent (min: 0; max: 10000)
	Delay *DelayParam `form:"delay,omitempty" json:"delay,omitempty"`

	// Format Response format (default: `json`)
	Format *DeleteReturnParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// DeleteReturnParamsFormat defines parameters for DeleteReturn.
type DeleteReturnParamsFormat string

// GetReturnParams defines parameters for GetReturn.
type GetReturnParams struct {
	// Delay Delay in milliseconds before the response is sent (min: 0; max: 10000)
	Delay *DelayParam `form:"delay,omitempty" json:"delay,omitempty"`

	// Format Response format (default: `json`)
	Format *GetReturnParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// GetReturnParamsFormat defines parameters for GetReturn.
type GetReturnParamsFormat string

// PatchReturnParams defines parameters for PatchReturn.
type PatchReturnParams struct {
	// Delay Delay in milliseconds before the response is sent (min: 0; max: 10000)
	Delay *DelayParam `form:"delay,omitempty" json:"delay,omitempty"`

	// Format Response format (default: `json`)
	Format *PatchReturnParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// PatchReturnParamsFormat defines parameters for PatchReturn.
type PatchReturnParamsFormat string

// PostReturnParams defines parameters for PostReturn.
type PostReturnParams struct {
	// Delay Delay in milliseconds before the response is sent (min: 0; max: 10000)
	Delay *DelayParam `form:"delay,omitempty" json:"delay,omitempty"`

	// Format Response format (default: `json`)
	Format *PostReturnParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// PostReturnParamsFormat defines parameters for PostReturn.
type PostReturnParamsFormat string

// PutReturnParams defines parameters for PutReturn.
type PutReturnParams struct {
	// Delay Delay in milliseconds before the response is sent (min: 0; max: 10000)
	Delay *DelayParam `form:"delay,omitempty" json:"delay,omitempty"`

	// Format Response format (default: `json`)
	Format *PutReturnParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// PutReturnParamsFormat defines parameters for PutReturn.
type PutReturnParamsFormat string

// DeleteStatusStatusParams defines parameters for DeleteStatusStatus.
type DeleteStatusStatusParams struct {
	// Delay Delay in milliseconds before the response is sent (min: 0; max: 10000)
	Delay *DelayParam `form:"delay,omitempty" json:"delay,omitempty"`
}

// GetStatusStatusParams defines parameters for GetStatusStatus.
type GetStatusStatusParams struct {
	// Delay Delay in milliseconds before the response is sent (min: 0; max: 10000)
	Delay *DelayParam `form:"delay,omitempty" json:"delay,omitempty"`
}

// PatchStatusStatusParams defines parameters for PatchStatusStatus.
type PatchStatusStatusParams struct {
	// Delay Delay in milliseconds before the response is sent (min: 0; max: 10000)
	Delay *DelayParam `form:"delay,omitempty" json:"delay,omitempty"`
}

// PostStatusStatusParams defines parameters for PostStatusStatus.
type PostStatusStatusParams struct {
	// Delay Delay in milliseconds before the response is sent (min: 0; max: 10000)
	Delay *DelayParam `form:"delay,omitempty" json:"delay,omitempty"`
}

// PutStatusStatusParams defines parameters for PutStatusStatus.
type PutStatusStatusParams struct {
	// Delay Delay in milliseconds before the response is sent (min: 0; max: 10000)
	Delay *DelayParam `form:"delay,omitempty" json:"delay,omitempty"`
}

// GetStreamJsonLogsParams defines parameters for GetStreamJsonLogs.
type GetStreamJsonLogsParams struct {
	// Delay Delay in milliseconds before the response is sent (min: 0; max: 10000)
	Delay *DelayParam `form:"delay,omitempty" json:"delay,omitempty"`

	// LogLevels Log levels to use (default: `debug,info,warn,error`)
	LogLevels *LogLevels `form:"logLevels,omitempty" json:"logLevels,omitempty"`

	// LogLevelWeights Log level weights (default: `1,5,3,2`)
	LogLevelWeights *LogLevelWeights `form:"logLevelWeights,omitempty" json:"logLevelWeights,omitempty"`

	// Interval Interval in milliseconds between streamed responses (min: 0; max: 5000)
	Interval *StreamInterval `form:"interval,omitempty" json:"interval,omitempty"`
}

// GetStreamJsonUserParams defines parameters for GetStreamJsonUser.
type GetStreamJsonUserParams struct {
	// Delay Delay in milliseconds before the response is sent (min: 0; max: 10000)
	Delay *DelayParam `form:"delay,omitempty" json:"delay,omitempty"`

	// Interval Interval in milliseconds between streamed responses (min: 0; max: 5000)
	Interval *StreamInterval `form:"interval,omitempty" json:"interval,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns random JSON data.
	// (GET /json/random)
	GetJsonRandom(w http.ResponseWriter, r *http.Request, params GetJsonRandomParams)
	// Returns random address data.
	// (GET /json/random/address)
	GetJsonRandomAddress(w http.ResponseWriter, r *http.Request, params GetJsonRandomAddressParams)
	// Returns random address data.
	// (GET /json/random/addresses)
	GetJsonRandomAddresses(w http.ResponseWriter, r *http.Request, params GetJsonRandomAddressesParams)
	// Returns random contact data.
	// (GET /json/random/contact)
	GetJsonRandomContact(w http.ResponseWriter, r *http.Request, params GetJsonRandomContactParams)
	// Returns random contact data.
	// (GET /json/random/contacts)
	GetJsonRandomContacts(w http.ResponseWriter, r *http.Request, params GetJsonRandomContactsParams)
	// Returns random log data.
	// (GET /json/random/log)
	GetJsonRandomLog(w http.ResponseWriter, r *http.Request, params GetJsonRandomLogParams)
	// Returns random user data.
	// (GET /json/random/user)
	GetJsonRandomUser(w http.ResponseWriter, r *http.Request, params GetJsonRandomUserParams)
	// Returns random user data.
	// (GET /json/random/users)
	GetJsonRandomUsers(w http.ResponseWriter, r *http.Request, params GetJsonRandomUsersParams)
	// Returns "pong"
	// (GET /ping)
	GetPing(w http.ResponseWriter, r *http.Request, params GetPingParams)
	// Returns the request data as JSON
	// (DELETE /return)
	DeleteReturn(w http.ResponseWriter, r *http.Request, params DeleteReturnParams)
	// Returns the request data as JSON
	// (GET /return)
	GetReturn(w http.ResponseWriter, r *http.Request, params GetReturnParams)
	// Returns the request data as JSON
	// (PATCH /return)
	PatchReturn(w http.ResponseWriter, r *http.Request, params PatchReturnParams)
	// Returns the request data as JSON
	// (POST /return)
	PostReturn(w http.ResponseWriter, r *http.Request, params PostReturnParams)
	// Returns the request data as JSON
	// (PUT /return)
	PutReturn(w http.ResponseWriter, r *http.Request, params PutReturnParams)
	// Returns the specified HTTP status code and status message
	// (DELETE /status/{status})
	DeleteStatusStatus(w http.ResponseWriter, r *http.Request, status int, params DeleteStatusStatusParams)
	// Returns the specified HTTP status code and status message
	// (GET /status/{status})
	GetStatusStatus(w http.ResponseWriter, r *http.Request, status int, params GetStatusStatusParams)
	// Returns the specified HTTP status code and status message
	// (PATCH /status/{status})
	PatchStatusStatus(w http.ResponseWriter, r *http.Request, status int, params PatchStatusStatusParams)
	// Returns the specified HTTP status code and status message
	// (POST /status/{status})
	PostStatusStatus(w http.ResponseWriter, r *http.Request, status int, params PostStatusStatusParams)
	// Returns the specified HTTP status code and status message
	// (PUT /status/{status})
	PutStatusStatus(w http.ResponseWriter, r *http.Request, status int, params PutStatusStatusParams)
	// Streams JSON logs.
	// (GET /stream/json/logs)
	GetStreamJsonLogs(w http.ResponseWriter, r *http.Request, params GetStreamJsonLogsParams)
	// Streams JSON data.
	// (GET /stream/json/user)
	GetStreamJsonUser(w http.ResponseWriter, r *http.Request, params GetStreamJsonUserParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetJsonRandom operation middleware
func (siw *ServerInterfaceWrapper) GetJsonRandom(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJsonRandomParams

	// ------------- Optional query parameter "delay" -------------

	err = runtime.BindQueryParameter("form", true, false, "delay", r.URL.Query(), &params.Delay)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "delay", Err: err})
		return
	}

	// ------------- Optional query parameter "maxDepth" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxDepth", r.URL.Query(), &params.MaxDepth)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "maxDepth", Err: err})
		return
	}

	// ------------- Optional query parameter "minDepth" -------------

	err = runtime.BindQueryParameter("form", true, false, "minDepth", r.URL.Query(), &params.MinDepth)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "minDepth", Err: err})
		return
	}

	// ------------- Optional query parameter "maxElems" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxElems", r.URL.Query(), &params.MaxElems)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "maxElems", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJsonRandom(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetJsonRandomAddress operation middleware
func (siw *ServerInterfaceWrapper) GetJsonRandomAddress(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJsonRandomAddressParams

	// ------------- Optional query parameter "delay" -------------

	err = runtime.BindQueryParameter("form", true, false, "delay", r.URL.Query(), &params.Delay)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "delay", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJsonRandomAddress(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetJsonRandomAddresses operation middleware
func (siw *ServerInterfaceWrapper) GetJsonRandomAddresses(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJsonRandomAddressesParams

	// ------------- Optional query parameter "delay" -------------

	err = runtime.BindQueryParameter("form", true, false, "delay", r.URL.Query(), &params.Delay)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "delay", Err: err})
		return
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", r.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "count", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJsonRandomAddresses(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetJsonRandomContact operation middleware
func (siw *ServerInterfaceWrapper) GetJsonRandomContact(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJsonRandomContactParams

	// ------------- Optional query parameter "delay" -------------

	err = runtime.BindQueryParameter("form", true, false, "delay", r.URL.Query(), &params.Delay)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "delay", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJsonRandomContact(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetJsonRandomContacts operation middleware
func (siw *ServerInterfaceWrapper) GetJsonRandomContacts(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJsonRandomContactsParams

	// ------------- Optional query parameter "delay" -------------

	err = runtime.BindQueryParameter("form", true, false, "delay", r.URL.Query(), &params.Delay)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "delay", Err: err})
		return
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", r.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "count", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJsonRandomContacts(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetJsonRandomLog operation middleware
func (siw *ServerInterfaceWrapper) GetJsonRandomLog(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJsonRandomLogParams

	// ------------- Optional query parameter "delay" -------------

	err = runtime.BindQueryParameter("form", true, false, "delay", r.URL.Query(), &params.Delay)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "delay", Err: err})
		return
	}

	// ------------- Optional query parameter "logLevels" -------------

	err = runtime.BindQueryParameter("form", true, false, "logLevels", r.URL.Query(), &params.LogLevels)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "logLevels", Err: err})
		return
	}

	// ------------- Optional query parameter "logLevelWeights" -------------

	err = runtime.BindQueryParameter("form", true, false, "logLevelWeights", r.URL.Query(), &params.LogLevelWeights)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "logLevelWeights", Err: err})
		return
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", r.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "count", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJsonRandomLog(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetJsonRandomUser operation middleware
func (siw *ServerInterfaceWrapper) GetJsonRandomUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJsonRandomUserParams

	// ------------- Optional query parameter "delay" -------------

	err = runtime.BindQueryParameter("form", true, false, "delay", r.URL.Query(), &params.Delay)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "delay", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJsonRandomUser(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetJsonRandomUsers operation middleware
func (siw *ServerInterfaceWrapper) GetJsonRandomUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJsonRandomUsersParams

	// ------------- Optional query parameter "delay" -------------

	err = runtime.BindQueryParameter("form", true, false, "delay", r.URL.Query(), &params.Delay)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "delay", Err: err})
		return
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", r.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "count", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJsonRandomUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPingParams

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", r.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "format", Err: err})
		return
	}

	// ------------- Optional query parameter "delay" -------------

	err = runtime.BindQueryParameter("form", true, false, "delay", r.URL.Query(), &params.Delay)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "delay", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPing(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteReturn operation middleware
func (siw *ServerInterfaceWrapper) DeleteReturn(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteReturnParams

	// ------------- Optional query parameter "delay" -------------

	err = runtime.BindQueryParameter("form", true, false, "delay", r.URL.Query(), &params.Delay)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "delay", Err: err})
		return
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", r.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "format", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteReturn(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetReturn operation middleware
func (siw *ServerInterfaceWrapper) GetReturn(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetReturnParams

	// ------------- Optional query parameter "delay" -------------

	err = runtime.BindQueryParameter("form", true, false, "delay", r.URL.Query(), &params.Delay)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "delay", Err: err})
		return
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", r.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "format", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetReturn(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchReturn operation middleware
func (siw *ServerInterfaceWrapper) PatchReturn(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchReturnParams

	// ------------- Optional query parameter "delay" -------------

	err = runtime.BindQueryParameter("form", true, false, "delay", r.URL.Query(), &params.Delay)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "delay", Err: err})
		return
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", r.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "format", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchReturn(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostReturn operation middleware
func (siw *ServerInterfaceWrapper) PostReturn(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostReturnParams

	// ------------- Optional query parameter "delay" -------------

	err = runtime.BindQueryParameter("form", true, false, "delay", r.URL.Query(), &params.Delay)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "delay", Err: err})
		return
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", r.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "format", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostReturn(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutReturn operation middleware
func (siw *ServerInterfaceWrapper) PutReturn(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PutReturnParams

	// ------------- Optional query parameter "delay" -------------

	err = runtime.BindQueryParameter("form", true, false, "delay", r.URL.Query(), &params.Delay)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "delay", Err: err})
		return
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", r.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "format", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutReturn(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteStatusStatus operation middleware
func (siw *ServerInterfaceWrapper) DeleteStatusStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "status" -------------
	var status int

	err = runtime.BindStyledParameterWithOptions("simple", "status", r.PathValue("status"), &status, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteStatusStatusParams

	// ------------- Optional query parameter "delay" -------------

	err = runtime.BindQueryParameter("form", true, false, "delay", r.URL.Query(), &params.Delay)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "delay", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteStatusStatus(w, r, status, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetStatusStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatusStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "status" -------------
	var status int

	err = runtime.BindStyledParameterWithOptions("simple", "status", r.PathValue("status"), &status, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStatusStatusParams

	// ------------- Optional query parameter "delay" -------------

	err = runtime.BindQueryParameter("form", true, false, "delay", r.URL.Query(), &params.Delay)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "delay", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStatusStatus(w, r, status, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchStatusStatus operation middleware
func (siw *ServerInterfaceWrapper) PatchStatusStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "status" -------------
	var status int

	err = runtime.BindStyledParameterWithOptions("simple", "status", r.PathValue("status"), &status, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchStatusStatusParams

	// ------------- Optional query parameter "delay" -------------

	err = runtime.BindQueryParameter("form", true, false, "delay", r.URL.Query(), &params.Delay)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "delay", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchStatusStatus(w, r, status, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostStatusStatus operation middleware
func (siw *ServerInterfaceWrapper) PostStatusStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "status" -------------
	var status int

	err = runtime.BindStyledParameterWithOptions("simple", "status", r.PathValue("status"), &status, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostStatusStatusParams

	// ------------- Optional query parameter "delay" -------------

	err = runtime.BindQueryParameter("form", true, false, "delay", r.URL.Query(), &params.Delay)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "delay", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostStatusStatus(w, r, status, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutStatusStatus operation middleware
func (siw *ServerInterfaceWrapper) PutStatusStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "status" -------------
	var status int

	err = runtime.BindStyledParameterWithOptions("simple", "status", r.PathValue("status"), &status, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutStatusStatusParams

	// ------------- Optional query parameter "delay" -------------

	err = runtime.BindQueryParameter("form", true, false, "delay", r.URL.Query(), &params.Delay)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "delay", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutStatusStatus(w, r, status, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetStreamJsonLogs operation middleware
func (siw *ServerInterfaceWrapper) GetStreamJsonLogs(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStreamJsonLogsParams

	// ------------- Optional query parameter "delay" -------------

	err = runtime.BindQueryParameter("form", true, false, "delay", r.URL.Query(), &params.Delay)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "delay", Err: err})
		return
	}

	// ------------- Optional query parameter "logLevels" -------------

	err = runtime.BindQueryParameter("form", true, false, "logLevels", r.URL.Query(), &params.LogLevels)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "logLevels", Err: err})
		return
	}

	// ------------- Optional query parameter "logLevelWeights" -------------

	err = runtime.BindQueryParameter("form", true, false, "logLevelWeights", r.URL.Query(), &params.LogLevelWeights)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "logLevelWeights", Err: err})
		return
	}

	// ------------- Optional query parameter "interval" -------------

	err = runtime.BindQueryParameter("form", true, false, "interval", r.URL.Query(), &params.Interval)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "interval", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStreamJsonLogs(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetStreamJsonUser operation middleware
func (siw *ServerInterfaceWrapper) GetStreamJsonUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStreamJsonUserParams

	// ------------- Optional query parameter "delay" -------------

	err = runtime.BindQueryParameter("form", true, false, "delay", r.URL.Query(), &params.Delay)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "delay", Err: err})
		return
	}

	// ------------- Optional query parameter "interval" -------------

	err = runtime.BindQueryParameter("form", true, false, "interval", r.URL.Query(), &params.Interval)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "interval", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStreamJsonUser(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/json/random", wrapper.GetJsonRandom)
	m.HandleFunc("GET "+options.BaseURL+"/json/random/address", wrapper.GetJsonRandomAddress)
	m.HandleFunc("GET "+options.BaseURL+"/json/random/addresses", wrapper.GetJsonRandomAddresses)
	m.HandleFunc("GET "+options.BaseURL+"/json/random/contact", wrapper.GetJsonRandomContact)
	m.HandleFunc("GET "+options.BaseURL+"/json/random/contacts", wrapper.GetJsonRandomContacts)
	m.HandleFunc("GET "+options.BaseURL+"/json/random/log", wrapper.GetJsonRandomLog)
	m.HandleFunc("GET "+options.BaseURL+"/json/random/user", wrapper.GetJsonRandomUser)
	m.HandleFunc("GET "+options.BaseURL+"/json/random/users", wrapper.GetJsonRandomUsers)
	m.HandleFunc("GET "+options.BaseURL+"/ping", wrapper.GetPing)
	m.HandleFunc("DELETE "+options.BaseURL+"/return", wrapper.DeleteReturn)
	m.HandleFunc("GET "+options.BaseURL+"/return", wrapper.GetReturn)
	m.HandleFunc("PATCH "+options.BaseURL+"/return", wrapper.PatchReturn)
	m.HandleFunc("POST "+options.BaseURL+"/return", wrapper.PostReturn)
	m.HandleFunc("PUT "+options.BaseURL+"/return", wrapper.PutReturn)
	m.HandleFunc("DELETE "+options.BaseURL+"/status/{status}", wrapper.DeleteStatusStatus)
	m.HandleFunc("GET "+options.BaseURL+"/status/{status}", wrapper.GetStatusStatus)
	m.HandleFunc("PATCH "+options.BaseURL+"/status/{status}", wrapper.PatchStatusStatus)
	m.HandleFunc("POST "+options.BaseURL+"/status/{status}", wrapper.PostStatusStatus)
	m.HandleFunc("PUT "+options.BaseURL+"/status/{status}", wrapper.PutStatusStatus)
	m.HandleFunc("GET "+options.BaseURL+"/stream/json/logs", wrapper.GetStreamJsonLogs)
	m.HandleFunc("GET "+options.BaseURL+"/stream/json/user", wrapper.GetStreamJsonUser)

	return m
}
